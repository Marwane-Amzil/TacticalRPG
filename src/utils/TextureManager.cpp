#include <utils/TextureManager.hpp> // utils::TextureManager
#include <schemas/textures.hpp> // from flatbuffers schema for textures (generated by flatc)
#include <SFML/Graphics/Texture.hpp> // sf::Texture
#include <fstream> // std::ifstream

namespace utils
{
	TextureManager::TextureManager()
		: _textures() {}

	TextureManager::~TextureManager() noexcept
	{
		for (auto& [type, textures] : _textures)
		{
			for (auto& [name, texture] : textures)
			{
				delete texture;
			}
		}
	}

	void TextureManager::loadTextures()
	{
		std::ifstream infile("assets/data/textures.bin", std::ios::binary | std::ios::in);
		infile.seekg(0, std::ios::end);
		std::streampos length = infile.tellg();
		infile.seekg(0, std::ios::beg);
		char* buffer = new char[length];
		infile.read(buffer, length);
		infile.close();

		auto textures_list = GetTextureRoot(buffer)->textures_sets();

		for (const auto& textures_set : *textures_list)
		{
			char player = textures_set->player()->str()[0];
			auto textures = textures_set->textures();

			for (const auto& texture : *textures)
			{
				const std::string& type = texture->type()->str();
				const std::string& path = texture->path()->str();
				
				sf::Texture* new_texture = new sf::Texture;
				new_texture->loadFromFile(path.data());

				_textures[player][type] = new_texture;
			}
		}

		delete[] buffer;
	}

	const std::map<std::string, sf::Texture*>& TextureManager::getTextures(char player) const
	{
		return _textures.at(player);
	}

	const sf::Texture* TextureManager::getTextureAt(char player, std::string_view type) const
	{
		return _textures.at(player).at(type.data());
	}
}