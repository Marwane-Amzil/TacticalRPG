// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_TEXTURES_H_
#define FLATBUFFERS_GENERATED_TEXTURES_H_

#include "flatbuffers/flatbuffers.h"

struct TextureRoot;
struct TextureRootBuilder;

struct Set;
struct SetBuilder;

struct Texture;
struct TextureBuilder;

struct TextureRoot FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextureRootBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TEXTURES_SETS = 4
  };
  const flatbuffers::Vector<flatbuffers::Offset<Set>> *textures_sets() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Set>> *>(VT_TEXTURES_SETS);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TEXTURES_SETS) &&
           verifier.VerifyVector(textures_sets()) &&
           verifier.VerifyVectorOfTables(textures_sets()) &&
           verifier.EndTable();
  }
};

struct TextureRootBuilder {
  typedef TextureRoot Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_textures_sets(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Set>>> textures_sets) {
    fbb_.AddOffset(TextureRoot::VT_TEXTURES_SETS, textures_sets);
  }
  explicit TextureRootBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<TextureRoot> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<TextureRoot>(end);
    return o;
  }
};

inline flatbuffers::Offset<TextureRoot> CreateTextureRoot(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Set>>> textures_sets = 0) {
  TextureRootBuilder builder_(_fbb);
  builder_.add_textures_sets(textures_sets);
  return builder_.Finish();
}

inline flatbuffers::Offset<TextureRoot> CreateTextureRootDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    std::vector<flatbuffers::Offset<Set>> *textures_sets = nullptr) {
  auto textures_sets__ = textures_sets ? _fbb.CreateVectorOfSortedTables<Set>(textures_sets) : 0;
  return CreateTextureRoot(
      _fbb,
      textures_sets__);
}

struct Set FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef SetBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_PLAYER = 4,
    VT_TEXTURES = 6
  };
  const flatbuffers::String *player() const {
    return GetPointer<const flatbuffers::String *>(VT_PLAYER);
  }
  bool KeyCompareLessThan(const Set *o) const {
    return *player() < *o->player();
  }
  int KeyCompareWithValue(const char *_player) const {
    return strcmp(player()->c_str(), _player);
  }
  const flatbuffers::Vector<flatbuffers::Offset<Texture>> *textures() const {
    return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<Texture>> *>(VT_TEXTURES);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_PLAYER) &&
           verifier.VerifyString(player()) &&
           VerifyOffset(verifier, VT_TEXTURES) &&
           verifier.VerifyVector(textures()) &&
           verifier.VerifyVectorOfTables(textures()) &&
           verifier.EndTable();
  }
};

struct SetBuilder {
  typedef Set Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_player(flatbuffers::Offset<flatbuffers::String> player) {
    fbb_.AddOffset(Set::VT_PLAYER, player);
  }
  void add_textures(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Texture>>> textures) {
    fbb_.AddOffset(Set::VT_TEXTURES, textures);
  }
  explicit SetBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Set> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Set>(end);
    fbb_.Required(o, Set::VT_PLAYER);
    return o;
  }
};

inline flatbuffers::Offset<Set> CreateSet(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> player = 0,
    flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<Texture>>> textures = 0) {
  SetBuilder builder_(_fbb);
  builder_.add_textures(textures);
  builder_.add_player(player);
  return builder_.Finish();
}

inline flatbuffers::Offset<Set> CreateSetDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *player = nullptr,
    const std::vector<flatbuffers::Offset<Texture>> *textures = nullptr) {
  auto player__ = player ? _fbb.CreateString(player) : 0;
  auto textures__ = textures ? _fbb.CreateVector<flatbuffers::Offset<Texture>>(*textures) : 0;
  return CreateSet(
      _fbb,
      player__,
      textures__);
}

struct Texture FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef TextureBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_TYPE = 4,
    VT_PATH = 6
  };
  const flatbuffers::String *type() const {
    return GetPointer<const flatbuffers::String *>(VT_TYPE);
  }
  const flatbuffers::String *path() const {
    return GetPointer<const flatbuffers::String *>(VT_PATH);
  }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_TYPE) &&
           verifier.VerifyString(type()) &&
           VerifyOffset(verifier, VT_PATH) &&
           verifier.VerifyString(path()) &&
           verifier.EndTable();
  }
};

struct TextureBuilder {
  typedef Texture Table;
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_type(flatbuffers::Offset<flatbuffers::String> type) {
    fbb_.AddOffset(Texture::VT_TYPE, type);
  }
  void add_path(flatbuffers::Offset<flatbuffers::String> path) {
    fbb_.AddOffset(Texture::VT_PATH, path);
  }
  explicit TextureBuilder(flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  flatbuffers::Offset<Texture> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<Texture>(end);
    return o;
  }
};

inline flatbuffers::Offset<Texture> CreateTexture(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> type = 0,
    flatbuffers::Offset<flatbuffers::String> path = 0) {
  TextureBuilder builder_(_fbb);
  builder_.add_path(path);
  builder_.add_type(type);
  return builder_.Finish();
}

inline flatbuffers::Offset<Texture> CreateTextureDirect(
    flatbuffers::FlatBufferBuilder &_fbb,
    const char *type = nullptr,
    const char *path = nullptr) {
  auto type__ = type ? _fbb.CreateString(type) : 0;
  auto path__ = path ? _fbb.CreateString(path) : 0;
  return CreateTexture(
      _fbb,
      type__,
      path__);
}

inline const TextureRoot *GetTextureRoot(const void *buf) {
  return flatbuffers::GetRoot<TextureRoot>(buf);
}

inline const TextureRoot *GetSizePrefixedTextureRoot(const void *buf) {
  return flatbuffers::GetSizePrefixedRoot<TextureRoot>(buf);
}

inline bool VerifyTextureRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<TextureRoot>(nullptr);
}

inline bool VerifySizePrefixedTextureRootBuffer(
    flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<TextureRoot>(nullptr);
}

inline void FinishTextureRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TextureRoot> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedTextureRootBuffer(
    flatbuffers::FlatBufferBuilder &fbb,
    flatbuffers::Offset<TextureRoot> root) {
  fbb.FinishSizePrefixed(root);
}

#endif  // FLATBUFFERS_GENERATED_TEXTURES_H_
